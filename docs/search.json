[{"path":"/articles/03_details.html","id":"structure-of-noaa-storm-events-data","dir":"Articles","previous_headings":"","what":"Structure of NOAA Storm Events data","title":"Details","text":"NOAA Storm Events data available online https://www.ncdc.noaa.gov/stormevents/. website includes documentation data, well page allows bulk data download yearly csv files either ftp http (https://www.ncdc.noaa.gov/stormevents/ftp.jsp). Data available January 1950 tends updated within months present. Data stored bulk year compressed comma-separated files (.csv.gz files). year three compressed files available: StormEvents_details file StormEvents_fatalities file StormEvents_loations file File names file include year data (e.g., “1950”) date file last modified (e.g., “20170120”). Files given regular names two specifications. regular naming scheme allows us use regular expressions code within noaastormevents package listed file names identify exact name file specific year, explained next section. size three file types increased time (see figure ; note y-axis log 10). largest file given year “Details” file. file sizes increased substantially 1996 (dotted vertical line), database dramatically expanded types events included. 1996, database covered tornadoes , years, types events. 1996, database expanded include events like floods, tropical storms, snow storms, etc. “Locations” files exist database early years, contain information 1996. See documentation NOAA Storm Events database website information coverage database different times across history.","code":""},{"path":"/articles/03_details.html","id":"downloading-noaa-storm-events-data-for-a-year","dir":"Articles","previous_headings":"","what":"Downloading NOAA Storm Events data for a year","title":"Details","text":"database data stored files separated year, file entire year identified downloaded user asks event listings time type event year. example, user wants list flood events week Hurricane Floyd 1999, functions noaastormevents package first identify download full “Details” data file 1999 filter flood events starting correct week. identify online file path specific year, find_file_name function noaastormevents package uses htmltab function (package name) create dataframe listing files available download NOAA Storm Events database. function uses regular expressions identify file name listing requested year. example, name file “Details” information 1999 can determined : full definition find_file_name function: Typically, function used internally rather called directly user. file name determined, function package downloads file user’s computer. years, files large, download can take little . avoid downloading data year within R session, downloading function stores downloaded data year temporary environment R user’s session. later requests year, function first check data year temporary environment download data online database already available user’s computer. environment created temporary, means deleted end current R session. packages access online databases cache downloaded data way persists R sessions, chose instead cache within R session, delete data close R session. Storm Event files large, users likely want keep small subset data given year (e.g., flood events week Hurricane Floyd). wasteful memory cache 1999 data indefinitely user’s computer case; instead, user use package create desired subset data explicitly store subset locally use future analysis. function downloading file year called download_storm_data. ’s full definition: Finally, noaastormevents package allows user query storm events either date range named historical tropical storm, rather year. create_storm_data function inputs either date range storm name, well requested file type, downloads data appropriate year years. user requests date range, function download yearly data files years included range. user requests tropical storm, function pull data particular year. full definition create_storm_data: note, many functions noaastormevents package allow linking events tropical storms rely historical data storms, including storm tracks, estimated distances eastern U.S. counties, dates storm closest county. package pulls historical data hurricaneexposuredata package, interfacing package hurricaneexposure. hurricane data goes 1988 (currently) 2015 includes Atlantic basin tropical storms came within 250 km least one U.S. county. following storms included package available used functions noaastormevents:","code":"find_file_name(year = \"1999\", file_type = \"detail\") ## [1] \"StormEvents_details-ftp_v1.0_d1999_c20220425.csv.gz\" find_file_name ## function (year = NULL, file_type = \"details\")  ## { ##     url <- paste0(\"https://www1.ncdc.noaa.gov/pub/data/swdi/\",  ##         \"stormevents/csvfiles/\") ##     page <- readLines(curl::curl(url)) ##     all_file_names <- XML::getHTMLLinks(page) ##     file_year <- paste0(\"_d\", year, \"_\") ##     file_name <- grep(file_type, grep(file_year, all_file_names,  ##         value = TRUE), value = TRUE) ##     if (length(file_name) == 0) { ##         stop(\"No file found for that year and / or file type.\") ##     } ##     return(file_name) ## } ## <bytecode: 0x7fb66aeaad88> ## <environment: namespace:noaastormevents> noaastormevents:::download_storm_data ## function (year, file_type = \"details\")  ## { ##     file_name <- find_file_name(year = year, file_type = file_type) ##     path_name <- paste0(\"https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/\",  ##         \"csvfiles/\", file_name) ##     if (!exists(\"noaastormevents_package_env\")) { ##         temp <- tempfile() ##         utils::download.file(path_name, temp) ##         noaastormevents_package_env <<- new.env() ##         noaastormevents_package_env$lst <- list() ##         noaastormevents_package_env$lst[[as.character(year)]] <- suppressWarnings(utils::read.csv(gzfile(temp),  ##             as.is = TRUE)) ##         unlink(temp) ##     } ##     else if (is.null(noaastormevents_package_env$lst[[as.character(year)]])) { ##         temp <- tempfile() ##         utils::download.file(path_name, temp) ##         noaastormevents_package_env$lst[[as.character(year)]] <- suppressWarnings(utils::read.csv(gzfile(temp),  ##             as.is = TRUE)) ##         unlink(temp) ##     } ##     return(NULL) ## } ## <bytecode: 0x7fb66fb68568> ## <environment: namespace:noaastormevents> create_storm_data ## function (date_range = NULL, storm = NULL, file_type = \"details\")  ## { ##     if (!is.null(date_range)) { ##         date_range_years <- lubridate::year(date_range) ##         requested_years <- seq(from = date_range_years[1], to = date_range_years[2]) ##         lapply(requested_years, download_storm_data) ##         for (i in 1:length(requested_years)) { ##             requested_year <- as.character(requested_years[i]) ##             if (i == 1) { ##                 storm_data <- noaastormevents_package_env$lst[[requested_year]] ##             } ##             else { ##                 storm_data <- rbind(storm_data, noaastormevents_package_env$lst[[requested_year]]) ##             } ##         } ##     } ##     else if (!is.null(storm)) { ##         storm_year <- stringr::str_extract(storm, \"\\\\-[0-9].+\") %>%  ##             stringr::str_remove(\"\\\\-\") ##         download_storm_data(year = storm_year, file_type = file_type) ##         storm_data <- noaastormevents_package_env$lst[[as.character(storm_year)]] ##     } ##     else { ##         stop(\"You must specify either `date_range` or `storm`.\") ##     } ##     storm_data <- tibble::as_tibble(storm_data) ##     return(storm_data) ## } ## <bytecode: 0x7fb66f525e68> ## <environment: namespace:noaastormevents>"},{"path":"/articles/03_details.html","id":"structure-of-details-data-files","dir":"Articles","previous_headings":"","what":"Structure of “Details” data files","title":"Details","text":"noaastormevent package focuses higher-level functions, result simplified cleaned version storm events data, user can use create_storm_data function pull full dataset year R work raw, uncleaned version. example, call pulls raw data 2015 R object called events_2015. raw data 51 columns. includes: date time beginning end event (BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, BEGIN_DATE_TIME, END_YEARMONTH, END_DAY, END_TIME, END_DATE_TIME) unique IDs event episode, can used link listings events episodes across three types files (“details”, “locations”, “fatalities”) (EPISODE_ID, EVENT_ID). Note unique event IDs (57,779 2015 events data) unique episode IDs (9,511 2015 events data) type event (EVENT_TYPE) location event (CZ_TYPE, CZ_FIPS, CZ_NAME, BEGIN_AZIMUTH, BEGIN_LOCATION, END_LOCATION, END_AZIMUTH, BEGIN_LAT, BEGIN_LON, END_LAT, END_LON) description impacts event (EPISODE_NARRATIVE, EVENT_NARRATIVE, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, DAMAGE_PROPERTY, DAMAGE_CROPS) information event reported (SOURCE) metrics specific event types (e.g., FLOOD_CAUSE, CATEGORY, TOR_F_SCALE, TOR_LENGTH, TOR_WIDTH)","code":"events_2015 <- create_storm_data(date_range = c(\"2015-01-01\", \"2015-12-31\")) slice(events_2015, 1:3) ## # A tibble: 3 × 51 ##   BEGIN_YEARMONTH BEGIN_DAY BEGIN_TIME END_YEARMONTH END_DAY END_TIME EPISODE_ID ##             <int>     <int>      <int>         <int>   <int>    <int>      <int> ## 1          201501        27       1200        201501      28      400      92561 ## 2          201501        24        700        201501      24     2100      92625 ## 3          201501        27        600        201501      27     1200      92561 ## # ℹ 44 more variables: EVENT_ID <int>, STATE <chr>, STATE_FIPS <int>, ## #   YEAR <int>, MONTH_NAME <chr>, EVENT_TYPE <chr>, CZ_TYPE <chr>, ## #   CZ_FIPS <int>, CZ_NAME <chr>, WFO <chr>, BEGIN_DATE_TIME <chr>, ## #   CZ_TIMEZONE <chr>, END_DATE_TIME <chr>, INJURIES_DIRECT <int>, ## #   INJURIES_INDIRECT <int>, DEATHS_DIRECT <int>, DEATHS_INDIRECT <int>, ## #   DAMAGE_PROPERTY <chr>, DAMAGE_CROPS <chr>, SOURCE <chr>, MAGNITUDE <dbl>, ## #   MAGNITUDE_TYPE <chr>, FLOOD_CAUSE <chr>, CATEGORY <int>, …"},{"path":"/articles/03_details.html","id":"event-types","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Event types","title":"Details","text":"following sections provide summary statistics data database single year (2015), help users better understand available data. Users may want conduct similar data analysis set data pull NOAA Storm Events database relevant particular research project. code vignette (available package’s GitHub repository) can serve starting point . 2015 event listings, types events number reported events : start dates listings event type distributed year (event types ordered decreasing total count year; note y-axes vary depending range events date event type):  Many event types clearly seasonal (e.g., winter weather, winter storms, heavy snow, cold, extreme cold, blizzards, ice storms, lake-effect snow, avalanches much common winter months, tropical depressions tropical storms limited hurricane season). However, events, reporting seasonal patterns might based just true pattern events also timing important exposures impacts events. example, rip currents many listings spring summer, may related events likely listed people swimming. Frost event listings particularly high start end frost season, rather middle winter, may related impacts frost crops higher spring fall winter. working data, important keep mind data based reporting, may related influences probability event reported included data differ using data something like weather station.","code":"## `summarise()` has grouped output by 'date'. You can override using the ## `.groups` argument."},{"path":"/articles/03_details.html","id":"episodes-versus-events","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Episodes versus events","title":"Details","text":"“Episodes” seem collect related “events”, events can vary type location event, “episode” collects events belong large system. following graph shows, episode listed 2015, number events listed episode (x-axis) size (days) range begin dates across events episode.  episode never include events one state, large weather system potentially described multiple episodes different states: maps beginning locations events episodes events 2015. Note beginning latitude longitude listed every event, resulting one episodes points map. maps, clear events within episode fairly close together.  episodes events 2015, following graph shows number events reported episode. One episodes winter storm, another heavy rains floods, rest episodes included high winds, hail, tornadoes, rain, / flooding.  removed event types less 50 listings 2015, cluster analysis event types, group events likely occur together within episode. following plot shows resulting cluster structure event types.  next graph shows number events event type (excluding event types less 50 total listings 2015). row represents episode.","code":"events_2015 %>%    select(EPISODE_ID, STATE) %>%    group_by(EPISODE_ID) %>%    summarize(n_states = length(unique(STATE))) %>%    ungroup() %>%    summarize(max_n_states = max(n_states)) ## # A tibble: 1 × 1 ##   max_n_states ##          <int> ## 1            1"},{"path":"/articles/03_details.html","id":"how-events-are-reported","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"How events are reported","title":"Details","text":"SOURCE column raw data gives information event reported. majority events database, least 2015, reported either trained spotter public. following graph shows, type event 2015, percent reported source. types events, reporting dominated specific source. example, high surf reports come trained spotters, drought reports come drought monitors tornado reports come NWS Storm Survey. types events, reporting sources diversified. axes plot ordered overall frequency (.e., overall number type event overall number reports source).","code":""},{"path":"/articles/03_details.html","id":"event-locations","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Event locations","title":"Details","text":"event state listed event (STATE). following graph gives number reported events state 2015:  Note “states” include bodies water (e.g., specific Great Lakes, Hawaii waters, Gulf Mexico) territories (American Samoa, Guam, Puerto Rico, Virgin Islands). event types, latitude longitude beginning event included event listing. Table continues 2015 events latitude longitude listed beginning event continental U.S., locations month:  locations event type:  events different latitudes longitudes beginning ending locations. example, maps one state (Arkansas) events different starting ending locations:  events reported forecast zone (CZTYPE “Z”) rather county (CZTYPE “C”). Specific types events typically either always reported county always reported forecast zone (see table ). Events typically reported county include floods (“Flash Flood”, “Flood”, “Debris Flow”), tornado-like events (“Tornado”, “Funnel Cloud”, “Dust Devil”), events often related thunderstorms (“Thunderstorm Wind”, “Hail”, “Heavy Rain”, “Lightning”). Events typically reported forecast zone include severe winter weather (“Winter Weather”, “Winter Storm”, “Heavy Snow”, “Cold/Wind Chill”, “Extreme Cold/Wind Chill”, “Blizzard”, “Frost/Freeze”, “Ice Storm”, “Sleet”, “Lake-Effect Snow”, “Avalanche”, “Freezing Fog”), extreme heat (“Heat”, “Excessive Heat”, “Drought”), events related water coast (“Marine Thunderstorm Wind”, “High Surf”, “Coastal Flood”, “Waterspout”, “Astronomical Low Tide”, “Rip Current”, “Tropical Storm”, “Marine High Wind”, “Marine Hail”, “Marine Strong Wind”, “Hurricane”, “Seiche”, “Storm Surge/Tide”, “Tropical Depression”, “Marine Dense Fog”, “Sneakerwave”, “Tsunami”), others (“High Wind”, “Dense Fog”, “Strong Wind”, “Wildfire”, “Dust Storm”, “Dense Smoke”). events reported county, maps showing distributions number events reported 2015:  sample events instead reported forecast zone, state, CZ_NAME, event narrative included. Note county name often provided CZ_NAME column, although CZ_FIPS value forecast zone event listed forecast zone. use code try match STATE CZ_NAME listings table U.S. county names associated county FIPS event listed forecast zone, allow events included event listings maps created functions noaastormevents. Table continues Within code noaastormevents, match_forecast_county used try match county FIPS events listed forecast zone. get full code function, can run match_forecast_county (.e., function name, without parentheses ). match events listed forecast zone county, function tries following try match part state_name cz_name columns storm events data state county names county.fips dataframe comes maps package: Tries match cz_name county name county.fips removing periods apostrophes cz_name. Next, county names ‘county’ , try match word ‘county’ county name county.fips. check two words ‘county’, one two words ‘counties’. Next, pull last word cz_name try match county name county.fips. check last two words cz_name, check last three words cz_name. Next, pull words right slash check county name. Finally, try removing anything parentheses cz_name matching. addition, final steps cleaning data. First, listings “Utah” cz_name set missing– Utah County, Utah, inspection event listings 2015, events Utah “Utah” cz_name often referred parts state, rather county. , event “National Park” listed cz_name set match county FIPS. Wyoming, Park County matched cz_name Yellowstone National Park, problem states, extra check included. 2015 events data, 22,664 events listed forecast zone rather county. match_forecast_county function applied events, 16,405 events linked county (72%) 6,259 events (28%) matched county. events matched county, 2,997 events outside continental U.S. (.e., Hawaii, Alaska, U.S. territories, waters): left 3,262 events continental U.S. listed forecast zone linked county match_forecast_county function. events value cz_name words related mountains, water, adjacency (e.g., “area ”, “vicinity ”), word types (e.g., “desert”, “hwy”). following table gives number remaining unmatched events words categories (note: cz_name event may words one categories, case counted table categories). following table summarizes number events linked county contained least one types words: 2015, cz_name values events matched county include words listed : events listed forecast zone successfully matched county, geographic distributions event counts 2015:  using function, event listings generated using function, user may want hand-check event listings names like “Lake” “Mountain” cz_name column erroneously matched counties names like “Lake County” “Mountain County”. Code like following can used checks (case, checking dataframe event listings named z_events_2015 output match_forecast_county fips added event listing, match found):","code":"## Warning: `filter_()` was deprecated in dplyr 0.7.0. ## ℹ Please use `filter()` instead. ## ℹ See vignette('programming') for more help ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: `select_()` was deprecated in dplyr 0.7.0. ## ℹ Please use `select()` instead. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. z_events_2015 %>%    filter(cz_type == \"Z\") %>%    select(cz_name, state, fips) %>%    mutate(cz_name = str_to_title(cz_name)) %>%    filter(str_detect(cz_name, \"Lake\") & !is.na(fips))  %>%    distinct()"},{"path":"/articles/03_details.html","id":"impact-measurements","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Impact measurements","title":"Details","text":"“Details” datasets year include six measurements impacts event: DEATHS_DIRECT DEATHS_INDIRECT INJURIES_DIRECT INJURIES_INDIRECT DAMAGE_PROPERTY DAMAGE_CROPS Many impact values given using abbreviations amounts. example, listing tornado gives property damage “5.00K”: Therefore, noaastormevents package uses function pull abbreviations convert associated impact values numeric values (e.g., 5000 “5.00K”). conversions conducted : “K” = 1,000 “M” = 1,000,000 “B” = 1,000,000,000 “T” = 1,000,000,000,000 done function parse_damage: Usually, seems cost per events within episode overlap, costs events episode can summed generate total damage cost. cases, different event listings within county episode damage cost, often seems total cost divided cases across events, case, total estimated cost $6,186,909 county (see narratives) spread evenly two event listings: Table continues However, cases appears costs might duplicated different events within episode county. example, following listing, looks like total estimated damage cost $1.7 million (see narrative) repeated two listed events, mean adding damages across events episode lead county damage cost twice true amount. Table continues times county two events part episode 2015, 3,136 (87%) cases damage costs identical across event listings county episode, 452 cases (13%) cost listings identical across event listings (shown cases just given). using damage cost estimates research, may wise hand-check cases damage cost estimates duplicated across different events way prevents summing across events get cumulative episode total cost. costs summed event county listings episode, ten episodes 2015 dataset highest total damage costs (combining property crop damage): Table continues table total number events non-zero damage (either property damage crop damage), total damage costs across events type 2015, median maximum damage per event events type non-zero damage costs. Event types ordered total damage costs summed across events. following graph shows distribution events listed damage costs greater $0 without.  following figure shows top 50 episodes terms damages (property crop damage combined) 2015:","code":"## Warning: `mutate_()` was deprecated in dplyr 0.7.0. ## ℹ Please use `mutate()` instead. ## ℹ See vignette('programming') for more help ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: `filter_()` was deprecated in dplyr 0.7.0. ## ℹ Please use `filter()` instead. ## ℹ See vignette('programming') for more help ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning: `select_()` was deprecated in dplyr 0.7.0. ## ℹ Please use `select()` instead. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. county_events_2015 %>% filter(event_id == \"582970\") ## # A tibble: 1 × 22 ##   begin_yearmonth begin_day end_yearmonth end_day episode_id event_id state      ##             <int>     <int>         <int>   <int>      <int>    <int> <chr>      ## 1          201506        13        201506      13      96906   582970 NORTH CAR… ## # ℹ 15 more variables: cz_type <chr>, cz_name <chr>, deaths_direct <int>, ## #   deaths_indirect <int>, injuries_direct <int>, injuries_indirect <int>, ## #   damage_property <chr>, damage_crops <chr>, event_type <chr>, ## #   state_fips <int>, cz_fips <int>, source <chr>, episode_narrative <chr>, ## #   event_narrative <chr>, fips <dbl> parse_damage ## function (damage_vector)  ## { ##     value_table <- dplyr::tibble(letter_damage = c(NA, \"K\", \"M\",  ##         \"B\", \"T\"), value_damage = 10^c(0, 3, 6, 9, 12)) ##     out <- dplyr::tibble(damage_vector) %>% dplyr::mutate(num_damage = stringr::str_extract(.data$damage_vector,  ##         \"[0-9.]+\"), num_damage = as.numeric(.data$num_damage),  ##         letter_damage = stringr::str_extract(.data$damage_vector,  ##             \"[A-Z]+\"), letter_damage = stringr::str_to_upper(.data$letter_damage)) %>%  ##         dplyr::left_join(value_table, by = \"letter_damage\") %>%  ##         dplyr::mutate(damage_vector = .data$num_damage * .data$value_damage,  ##             damage_vector = ifelse(is.na(.data$damage_vector),  ##                 0, .data$damage_vector)) ##     return(out$damage_vector) ## } ## <bytecode: 0x7fb66aededc0> ## <environment: namespace:noaastormevents>"},{"path":"/articles/details.html","id":"structure-of-noaa-storm-events-data","dir":"Articles","previous_headings":"","what":"Structure of NOAA Storm Events data","title":"Details of `noaastormevents`","text":"NOAA Storm Events data available online https://www.ncdc.noaa.gov/stormevents/. website includes documentation data, well page allows bulk data download yearly csv files either ftp http (https://www.ncdc.noaa.gov/stormevents/ftp.jsp). Data available January 1950 tends updated within months present. Data stored bulk year compressed comma-separated files (.csv.gz files). year three compressed files available: StormEvents_details file StormEvents_fatalities file StormEvents_loations file File names file include year data (e.g., “1950”) date file last modified (e.g., “20170120”). Files given regular names two specifications. regular naming scheme allows us use regular expressions code within noaastormevents package listed file names identify exact name file specific year, explained next section. size three file types increased time (see figure ; note y-axis log 10). largest file given year “Details” file. file sizes increased substantially 1996 (dotted vertical line), database dramatically expanded types events included. 1996, database covered tornadoes , years, types events. 1996, database expanded include events like floods, tropical storms, snow storms, etc. “Locations” files exist database early years, contain information 1996. See documentation NOAA Storm Events database website information coverage database different times across history.","code":""},{"path":"/articles/details.html","id":"downloading-noaa-storm-events-data-for-a-year","dir":"Articles","previous_headings":"","what":"Downloading NOAA Storm Events data for a year","title":"Details of `noaastormevents`","text":"database data stored files separated year, file entire year identified downloaded user asks event listings time type event year. example, user wants list flood events week Hurricane Floyd 1999, functions noaastormevents package first identify download full “Details” data file 1999 filter flood events starting correct week. identify online file path specific year, find_file_name function noaastormevents package uses htmltab function (package name) create dataframe listing files available download NOAA Storm Events database. function uses regular expressions identify file name listing requested year. example, name file “Details” information 1999 can determined : full definition find_file_name function: Typically, function used internally rather called directly user. file name determined, function package downloads file user’s computer. years, files large, download can take little . avoid downloading data year within R session, downloading function stores downloaded data year temporary environment R user’s session. later requests year, function first check data year temporary environment download data online database already available user’s computer. environment created temporary, means deleted end current R session. packages access online databases cache downloaded data way persists R sessions, chose instead cache within R session, delete data close R session. Storm Event files large, users likely want keep small subset data given year (e.g., flood events week Hurricane Floyd). wasteful memory cache 1999 data indefinitely user’s computer case; instead, user use package create desired subset data explicitly store subset locally use future analysis. function downloading file year called download_storm_data. ’s full definition: Finally, noaastormevents package allows user query storm events either date range named historical tropical storm, rather year. create_storm_data function inputs either date range storm name, well requested file type, downloads data appropriate year years. user requests date range, function download yearly data files years included range. user requests tropical storm, function pull data particular year. full definition create_storm_data: note, many functions noaastormevents package allow linking events tropical storms rely historical data storms, including storm tracks, estimated distances eastern U.S. counties, dates storm closest county. package pulls historical data hurricaneexposuredata package, interfacing package hurricaneexposure. hurricane data goes 1988 (currently) 2015 includes Atlantic basin tropical storms came within 250 km least one U.S. county. following storms included package available used functions noaastormevents:","code":"find_file_name(year = \"1999\", file_type = \"detail\") find_file_name noaastormevents:::download_storm_data create_storm_data"},{"path":"/articles/details.html","id":"structure-of-details-data-files","dir":"Articles","previous_headings":"","what":"Structure of “Details” data files","title":"Details of `noaastormevents`","text":"noaastormevent package focuses higher-level functions, result simplified cleaned version storm events data, user can use create_storm_data function pull full dataset year R work raw, uncleaned version. example, call pulls raw data 2015 R object called events_2015. raw data 51 columns. includes: date time beginning end event (BEGIN_YEARMONTH, BEGIN_DAY, BEGIN_TIME, BEGIN_DATE_TIME, END_YEARMONTH, END_DAY, END_TIME, END_DATE_TIME) unique IDs event episode, can used link listings events episodes across three types files (“details”, “locations”, “fatalities”) (EPISODE_ID, EVENT_ID). Note unique event IDs (57,779 2015 events data) unique episode IDs (9,511 2015 events data) type event (EVENT_TYPE) location event (CZ_TYPE, CZ_FIPS, CZ_NAME, BEGIN_AZIMUTH, BEGIN_LOCATION, END_LOCATION, END_AZIMUTH, BEGIN_LAT, BEGIN_LON, END_LAT, END_LON) description impacts event (EPISODE_NARRATIVE, EVENT_NARRATIVE, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, DAMAGE_PROPERTY, DAMAGE_CROPS) information event reported (SOURCE) metrics specific event types (e.g., FLOOD_CAUSE, CATEGORY, TOR_F_SCALE, TOR_LENGTH, TOR_WIDTH)","code":"events_2015 <- create_storm_data(date_range = c(\"2015-01-01\", \"2015-12-31\")) slice(events_2015, 1:3)"},{"path":"/articles/details.html","id":"event-types","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Event types","title":"Details of `noaastormevents`","text":"following sections provide summary statistics data database single year (2015), help users better understand available data. Users may want conduct similar data analysis set data pull NOAA Storm Events database relevant particular research project. code vignette (available package’s GitHub repository) can serve starting point . 2015 event listings, types events number reported events : start dates listings event type distributed year (event types ordered decreasing total count year; note y-axes vary depending range events date event type): Many event types clearly seasonal (e.g., winter weather, winter storms, heavy snow, cold, extreme cold, blizzards, ice storms, lake-effect snow, avalanches much common winter months, tropical depressions tropical storms limited hurricane season). However, events, reporting seasonal patterns might based just true pattern events also timing important exposures impacts events. example, rip currents many listings spring summer, may related events likely listed people swimming. Frost event listings particularly high start end frost season, rather middle winter, may related impacts frost crops higher spring fall winter. working data, important keep mind data based reporting, may related influences probability event reported included data differ using data something like weather station.","code":""},{"path":"/articles/details.html","id":"episodes-versus-events","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Episodes versus events","title":"Details of `noaastormevents`","text":"“Episodes” seem collect related “events”, events can vary type location event, “episode” collects events belong large system. following graph shows, episode listed 2015, number events listed episode (x-axis) size (days) range begin dates across events episode. episode never include events one state, large weather system potentially described multiple episodes different states: maps beginning locations events episodes events 2015. Note beginning latitude longitude listed every event, resulting one episodes points map. maps, clear events within episode fairly close together. episodes events 2015, following graph shows number events reported episode. One episodes winter storm, another heavy rains floods, rest episodes included high winds, hail, tornadoes, rain, / flooding. removed event types less 50 listings 2015, cluster analysis event types, group events likely occur together within episode. following plot shows resulting cluster structure event types. next graph shows number events event type (excluding event types less 50 total listings 2015). row represents episode.","code":"events_2015 %>%    select(EPISODE_ID, STATE) %>%    group_by(EPISODE_ID) %>%    summarize(n_states = length(unique(STATE))) %>%    ungroup() %>%    summarize(max_n_states = max(n_states))"},{"path":"/articles/details.html","id":"how-events-are-reported","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"How events are reported","title":"Details of `noaastormevents`","text":"SOURCE column raw data gives information event reported. majority events database, least 2015, reported either trained spotter public. following graph shows, type event 2015, percent reported source. types events, reporting dominated specific source. example, high surf reports come trained spotters, drought reports come drought monitors tornado reports come NWS Storm Survey. types events, reporting sources diversified. axes plot ordered overall frequency (.e., overall number type event overall number reports source).","code":""},{"path":"/articles/details.html","id":"event-locations","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Event locations","title":"Details of `noaastormevents`","text":"event state listed event (STATE). following graph gives number reported events state 2015: Note “states” include bodies water (e.g., specific Great Lakes, Hawaii waters, Gulf Mexico) territories (American Samoa, Guam, Puerto Rico, Virgin Islands). event types, latitude longitude beginning event included event listing. 2015 events latitude longitude listed beginning event continental U.S., locations month: locations event type: events different latitudes longitudes beginning ending locations. example, maps one state (Arkansas) events different starting ending locations: events reported forecast zone (CZTYPE “Z”) rather county (CZTYPE “C”). Specific types events typically either always reported county always reported forecast zone (see table ). Events typically reported county include floods (“Flash Flood”, “Flood”, “Debris Flow”), tornado-like events (“Tornado”, “Funnel Cloud”, “Dust Devil”), events often related thunderstorms (“Thunderstorm Wind”, “Hail”, “Heavy Rain”, “Lightning”). Events typically reported forecast zone include severe winter weather (“Winter Weather”, “Winter Storm”, “Heavy Snow”, “Cold/Wind Chill”, “Extreme Cold/Wind Chill”, “Blizzard”, “Frost/Freeze”, “Ice Storm”, “Sleet”, “Lake-Effect Snow”, “Avalanche”, “Freezing Fog”), extreme heat (“Heat”, “Excessive Heat”, “Drought”), events related water coast (“Marine Thunderstorm Wind”, “High Surf”, “Coastal Flood”, “Waterspout”, “Astronomical Low Tide”, “Rip Current”, “Tropical Storm”, “Marine High Wind”, “Marine Hail”, “Marine Strong Wind”, “Hurricane”, “Seiche”, “Storm Surge/Tide”, “Tropical Depression”, “Marine Dense Fog”, “Sneakerwave”, “Tsunami”), others (“High Wind”, “Dense Fog”, “Strong Wind”, “Wildfire”, “Dust Storm”, “Dense Smoke”). events reported county, maps showing distributions number events reported 2015: sample events instead reported forecast zone, state, CZ_NAME, event narrative included. Note county name often provided CZ_NAME column, although CZ_FIPS value forecast zone event listed forecast zone. use code try match STATE CZ_NAME listings table U.S. county names associated county FIPS event listed forecast zone, allow events included event listings maps created functions noaastormevents. Within code noaastormevents, match_forecast_county used try match county FIPS events listed forecast zone. get full code function, can run match_forecast_county (.e., function name, without parentheses ). match events listed forecast zone county, function tries following try match part state_name cz_name columns storm events data state county names county.fips dataframe comes maps package: Tries match cz_name county name county.fips removing periods apostrophes cz_name. Next, county names ‘county’ , try match word ‘county’ county name county.fips. check two words ‘county’, one two words ‘counties’. Next, pull last word cz_name try match county name county.fips. check last two words cz_name, check last three words cz_name. Next, pull words right slash check county name. Finally, try removing anything parentheses cz_name matching. addition, final steps cleaning data. First, listings “Utah” cz_name set missing– Utah County, Utah, inspection event listings 2015, events Utah “Utah” cz_name often referred parts state, rather county. , event “National Park” listed cz_name set match county FIPS. Wyoming, Park County matched cz_name Yellowstone National Park, problem states, extra check included. 2015 events data, 22,664 events listed forecast zone rather county. match_forecast_county function applied events, 16,405 events linked county (72%) 6,259 events (28%) matched county. events matched county, 2,997 events outside continental U.S. (.e., Hawaii, Alaska, U.S. territories, waters): left 3,262 events continental U.S. listed forecast zone linked county match_forecast_county function. events value cz_name words related mountains, water, adjacency (e.g., “area ”, “vicinity ”), word types (e.g., “desert”, “hwy”). following table gives number remaining unmatched events words categories (note: cz_name event may words one categories, case counted table categories). following table summarizes number events linked county contained least one types words: 2015, cz_name values events matched county include words listed : events listed forecast zone successfully matched county, geographic distributions event counts 2015: using function, event listings generated using function, user may want hand-check event listings names like “Lake” “Mountain” cz_name column erroneously matched counties names like “Lake County” “Mountain County”. Code like following can used checks (case, checking dataframe event listings named z_events_2015 output match_forecast_county fips added event listing, match found):","code":"z_events_2015 %>%    filter(cz_type == \"Z\") %>%    select(cz_name, state, fips) %>%    mutate(cz_name = str_to_title(cz_name)) %>%    filter(str_detect(cz_name, \"Lake\") & !is.na(fips))  %>%    distinct()"},{"path":"/articles/details.html","id":"impact-measurements","dir":"Articles","previous_headings":"Structure of “Details” data files","what":"Impact measurements","title":"Details of `noaastormevents`","text":"“Details” datasets year include six measurements impacts event: DEATHS_DIRECT DEATHS_INDIRECT INJURIES_DIRECT INJURIES_INDIRECT DAMAGE_PROPERTY DAMAGE_CROPS Many impact values given using abbreviations amounts. example, listing tornado gives property damage “5.00K”: Therefore, noaastormevents package uses function pull abbreviations convert associated impact values numeric values (e.g., 5000 “5.00K”). conversions conducted : “K” = 1,000 “M” = 1,000,000 “B” = 1,000,000,000 “T” = 1,000,000,000,000 done function parse_damage: Usually, seems cost per events within episode overlap, costs events episode can summed generate total damage cost. cases, different event listings within county episode damage cost, often seems total cost divided cases across events, case, total estimated cost $6,186,909 county (see narratives) spread evenly two event listings: However, cases appears costs might duplicated different events within episode county. example, following listing, looks like total estimated damage cost $1.7 million (see narrative) repeated two listed events, mean adding damages across events episode lead county damage cost twice true amount. times county two events part episode 2015, 3,136 (87%) cases damage costs identical across event listings county episode, 452 cases (13%) cost listings identical across event listings (shown cases just given). using damage cost estimates research, may wise hand-check cases damage cost estimates duplicated across different events way prevents summing across events get cumulative episode total cost. costs summed event county listings episode, ten episodes 2015 dataset highest total damage costs (combining property crop damage): table total number events non-zero damage (either property damage crop damage), total damage costs across events type 2015, median maximum damage per event events type non-zero damage costs. Event types ordered total damage costs summed across events. following graph shows distribution events listed damage costs greater $0 without. following figure shows top 50 episodes terms damages (property crop damage combined) 2015:","code":"county_events_2015 %>% filter(event_id == \"582970\") parse_damage"},{"path":"/articles/noaastormevents.html","id":"description-of-package","dir":"Articles","previous_headings":"","what":"Description of package","title":"Overview of noaastormevents","text":"package can used explore map data NOAA’s Storm Events Database. storm event database maintained NOAA’s National Centers Environmental Information aims provide information, including estimates damage human health impacts, severe storm events affect U.S. aggregated storm event listings tornados since 1950s broad range event types (e.g., snow storms, heat waves, droughts, wildfires, floods) since 1996. database used either alone conjunction data number scientific studies. available downloading https://www.ncdc.noaa.gov/stormevents/ftp.jsp, three files (one event details, one fatality details, location details) available per year. online database structured API, package uses regular expressions search listings available files identify filename queried year download year’s data user’s R session. package functions filter downloaded storm event listings based dates, locations, event types, search limitations specified user. particular, package can used identify storm event listings close location time Atlantic basin tropical storm tracks. package two main functions: find_events: Create dataframe event listings county based user-specified parameters (e.g., date range, specific tropical storm, type event) NOAA Storm Events database map_events: Create map showing geographic distribution county certain features events dataframe (e.g., whether county event, number events per county, total property damage county across event listings). package aims create map events data county, events listed original database forecast zone rather county. observations, package functions attempts match observation appropriate county. However, events listed forecast zone matched county, excluded results returned package. , may occasional errors matching, include marker returned datasets indicating events listed forecast zone rather county, allow quality control checks user specific applications package. noaastormevents package includes options allow users find events based proximity tropical storm. use functionality, user must hurricaneexposuredata package, available drat repository, installed locally. package can installed running: important users note limitations storm events database. particular, listings can somewhat subjective. lack event listing database considered definitive proof storm conditions exist location certain time. , database changed time terms types events included. R users review Storm Event Database’s documentation, available database’s website, sure understand use interpret event listings database. , noaastormevents package includes “Details” vignette details storm events data processed functions package.","code":"library(drat) addRepo(\"geanders\") install.packages(\"hurricaneexposuredata\")"},{"path":"/articles/noaastormevents.html","id":"creating-storm-events-datasets","dir":"Articles","previous_headings":"","what":"Creating storm events datasets","title":"Overview of noaastormevents","text":"package two main functions. First, find_events function can used create dataframe storm event listings within specified time frame. example, following code creates dataframe events NOAA Storm Events Database listed beginning September 14 18, 1999 (time window relevant Hurricane Floyd, caused extensive damage, especially flooding): code call returns data frame subset data Storm Events Database 1999. event listing start date September 14 18 included. data frame following columns: begin_date: date event began end_date: date event ended state: state event occurred cz_type: Whether event listed county forecast zone (possible, events listed forecast zone linked appropriate county FIPS code therefore excluded returned dataframe. However, column included allow users perform quality control events listed forecast zone (CZ_TYPE “Z”).) cz_name: name county (area name) event occurred. event_type: Event type (e.g., “Flood”, “Lightning”, “Tornado”, “Wildfire”). See NOAA Storm Events documentation definitions event types source: source storm event listing (e.g., trained spotter, emergency manager, general public, law enforcement) injuries_direct, injuries_indirect, deaths_direct, deaths_indirect, damage_property, damage_crops: Estimates damage event human health, property, crops. damages, initial values database (e.g., \"5K\") converted possible numeric values (e.g., 5000). See “Details” vignette details process. fips: Five-digit county (Federal Information Processing Standard) FIPS code. code uniquely identifies U.S. county. event reported forecast zone (cz_type Z), code within package used regular expressions try correctly match area name county FIPS (see “Details” vignette details process). several ways can customize use find_events function. details, see article “Finding Events”.","code":"sept_1999_events <- find_events(date_range = c(\"1999-09-14\", \"1999-09-18\")) head(sept_1999_events) ## # A tibble: 6 × 14 ##   begin_date end_date   state  cz_type cz_name event_type source injuries_direct ##   <date>     <date>     <chr>  <chr>   <chr>   <chr>      <chr>            <int> ## 1 1999-09-14 1999-09-14 Flori… C       Duval   Thunderst… TRAIN…               0 ## 2 1999-09-14 1999-09-14 Flori… C       St. Jo… Thunderst… TRAIN…               0 ## 3 1999-09-14 1999-09-14 Arizo… C       Marico… Hail       OFFIC…               0 ## 4 1999-09-14 1999-09-14 Arizo… C       Marico… Hail       TRAIN…               0 ## 5 1999-09-14 1999-09-14 Arizo… C       Pinal   Thunderst… NEWSP…               0 ## 6 1999-09-14 1999-09-14 Arizo… C       Marico… Lightning  EMERG…               1 ## # ℹ 6 more variables: injuries_indirect <int>, deaths_direct <int>, ## #   deaths_indirect <int>, damage_property <dbl>, damage_crops <dbl>, ## #   fips <dbl>"},{"path":"/articles/noaastormevents.html","id":"mapping-storm-events","dir":"Articles","previous_headings":"","what":"Mapping storm events","title":"Overview of noaastormevents","text":"package also function, map_events, mapping several different features storm event dataframes returned find_events. function meant provide reasonable defaults many maps user might want create data, cases might provide exact map user like create. case, recommend user try choroplethr package, can used map US county data long data includes county FIPS codes, dataframes returned find_events . map_events function allows create maps several features dataframe returned find_events: “events”: Map whether county listed events “number events”: Map number events listed county “direct deaths”: Map total count direct deaths across events listed county “direct injuries”: Map total count direct injuries across events listed county “indirect deaths”: Map total count direct deaths across events listed county “indirect injuries”: Map total count direct injuries across events listed county “property damage”: Map total property damage across events listed county “crop damage”: Map total crop damage across events listed county maps property crop damage use logarithmic scale, others use untransformed scale. Listings events within county input dataframe summed create county-level values map. function allows mapping indirect injuries deaths, practice seems rarely listed recent Storm Events data, may create informative maps. map_events function inputs dataframe created find_events. example, map counties events listed started September 14 18, 2009, can run:  many ways can customize use function. details use map_events function, see article “Mapping Events”.","code":"event_data <- find_events(date_range = c(\"1999-09-14\", \"1999-09-18\")) map_events(event_data)"},{"path":"/articles/noaastormevents.html","id":"find-out-more","dir":"Articles","previous_headings":"","what":"Find out more","title":"Overview of noaastormevents","text":"many details describing package works, well details Storm Events data, “Details” article.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brooke Anderson. Author, maintainer. Ziyu Chen. Author. Therese Kondash. Author. Jordan Robinson. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson B, Chen Z, Kondash T, Robinson J (2023). noaastormevents: Explore NOAA Storm Events Database. R package version 0.2.0.9, https://github.com/geanders/noaastormevents.","code":"@Manual{,   title = {noaastormevents: Explore NOAA Storm Events Database},   author = {Brooke Anderson and Ziyu Chen and Therese Kondash and Jordan Robinson},   year = {2023},   note = {R package version 0.2.0.9},   url = {https://github.com/geanders/noaastormevents}, }"},{"path":"/index.html","id":"description-of-package","dir":"","previous_headings":"","what":"Description of package","title":"Explore NOAA Storm Events Database","text":"package can used explore map data NOAA’s Storm Events Database. storm event database maintained NOAA’s National Centers Environmental Information aims provide information, including estimates damage human health impacts, severe storm events affect U.S. aggregated storm event listings tornados since 1950s broad range event types (e.g., snow storms, heat waves, droughts, wildfires, floods) since 1996. database used either alone conjunction data number scientific studies. available downloading https://www.ncdc.noaa.gov/stormevents/ftp.jsp, three files (one event details, one fatality details, location details) available per year. online database structured API, package uses regular expressions search listings available files identify filename queried year download year’s data user’s R session. package functions filter downloaded storm event listings based dates, locations, event types, search limitations specified user. particular, package can used identify storm event listings close location time Atlantic basin tropical storm tracks. package two main functions: find_events: Create dataframe event listings county based user-specified parameters (e.g., date range, specific tropical storm, type event) NOAA Storm Events database map_events: Create map showing geographic distribution county certain features events dataframe (e.g., whether county event, number events per county, total property damage county across event listings). package aims create map events data county, events listed original database forecast zone rather county. observations, package functions attempts match observation appropriate county. However, events listed forecast zone matched county, excluded results returned package. , may occasional errors matching, include marker returned datasets indicating events listed forecast zone rather county, allow quality control checks user specific applications package. noaastormevents package includes options allow users find events based proximity tropical storm. use functionality, user must hurricaneexposuredata package, available drat repository, installed locally. package can installed running: important users note limitations storm events database. particular, listings can somewhat subjective. lack event listing database considered definitive proof storm conditions exist location certain time. , database changed time terms types events included. R users review Storm Event Database’s documentation, available database’s website, sure understand use interpret event listings database. , noaastormevents package includes “Details” vignette details storm events data processed functions package.","code":"library(drat) addRepo(\"geanders\") install.packages(\"hurricaneexposuredata\")"},{"path":"/index.html","id":"creating-storm-events-datasets","dir":"","previous_headings":"","what":"Creating storm events datasets","title":"Explore NOAA Storm Events Database","text":"package two main functions. First, find_events function can used create dataframe storm event listings within specified time frame. example, following code creates dataframe events NOAA Storm Events Database listed beginning September 14 18, 1999 (time window relevant Hurricane Floyd, caused extensive damage, especially flooding): code call returns data frame subset data Storm Events Database 1999. event listing start date September 14 18 included. data frame following columns: begin_date: date event began end_date: date event ended state: state event occurred cz_type: Whether event listed county forecast zone (possible, events listed forecast zone linked appropriate county FIPS code therefore excluded returned dataframe. However, column included allow users perform quality control events listed forecast zone (CZ_TYPE “Z”).) cz_name: name county (area name) event occurred. event_type: Event type (e.g., “Flood”, “Lightning”, “Tornado”, “Wildfire”). See NOAA Storm Events documentation definitions event types source: source storm event listing (e.g., trained spotter, emergency manager, general public, law enforcement) injuries_direct, injuries_indirect, deaths_direct, deaths_indirect, damage_property, damage_crops: Estimates damage event human health, property, crops. damages, initial values database (e.g., \"5K\") converted possible numeric values (e.g., 5000). See “Details” vignette details process. fips: Five-digit county (Federal Information Processing Standard) FIPS code. code uniquely identifies U.S. county. event reported forecast zone (cz_type Z), code within package used regular expressions try correctly match area name county FIPS (see “Details” vignette details process). several ways can customize use find_events function. details, see article “Finding Events”.","code":"sept_1999_events <- find_events(date_range = c(\"1999-09-14\", \"1999-09-18\")) head(sept_1999_events) #> # A tibble: 6 × 14 #>   begin_date end_date   state  cz_type cz_name event_type source injuries_direct #>   <date>     <date>     <chr>  <chr>   <chr>   <chr>      <chr>            <int> #> 1 1999-09-14 1999-09-14 Flori… C       Duval   Thunderst… TRAIN…               0 #> 2 1999-09-14 1999-09-14 Flori… C       St. Jo… Thunderst… TRAIN…               0 #> 3 1999-09-14 1999-09-14 Arizo… C       Marico… Hail       OFFIC…               0 #> 4 1999-09-14 1999-09-14 Arizo… C       Marico… Hail       TRAIN…               0 #> 5 1999-09-14 1999-09-14 Arizo… C       Pinal   Thunderst… NEWSP…               0 #> 6 1999-09-14 1999-09-14 Arizo… C       Marico… Lightning  EMERG…               1 #> # ℹ 6 more variables: injuries_indirect <int>, deaths_direct <int>, #> #   deaths_indirect <int>, damage_property <dbl>, damage_crops <dbl>, #> #   fips <dbl>"},{"path":"/index.html","id":"mapping-storm-events","dir":"","previous_headings":"","what":"Mapping storm events","title":"Explore NOAA Storm Events Database","text":"package also function, map_events, mapping several different features storm event dataframes returned find_events. function meant provide reasonable defaults many maps user might want create data, cases might provide exact map user like create. case, recommend user try choroplethr package, can used map US county data long data includes county FIPS codes, dataframes returned find_events . map_events function allows create maps several features dataframe returned find_events: “events”: Map whether county listed events “number events”: Map number events listed county “direct deaths”: Map total count direct deaths across events listed county “direct injuries”: Map total count direct injuries across events listed county “indirect deaths”: Map total count direct deaths across events listed county “indirect injuries”: Map total count direct injuries across events listed county “property damage”: Map total property damage across events listed county “crop damage”: Map total crop damage across events listed county maps property crop damage use logarithmic scale, others use untransformed scale. Listings events within county input dataframe summed create county-level values map. function allows mapping indirect injuries deaths, practice seems rarely listed recent Storm Events data, may create informative maps. map_events function inputs dataframe created find_events. example, map counties events listed started September 14 18, 2009, can run:  many ways can customize use function. details use map_events function, see article “Mapping Events”.","code":"event_data <- find_events(date_range = c(\"1999-09-14\", \"1999-09-18\")) map_events(event_data)"},{"path":"/index.html","id":"find-out-more","dir":"","previous_headings":"","what":"Find out more","title":"Explore NOAA Storm Events Database","text":"many details describing package works, well details Storm Events data, “Details” article.","code":""},{"path":"/reference/adjust_storm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust storm data — adjust_storm_data","title":"Adjust storm data — adjust_storm_data","text":"Adjusts storm data based user selections date range, distance limit storm, etc.","code":""},{"path":"/reference/adjust_storm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust storm data — adjust_storm_data","text":"","code":"adjust_storm_data(   storm_data,   date_range = NULL,   event_types = NULL,   dist_limit = NULL,   storm = NULL )"},{"path":"/reference/adjust_storm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust storm data — adjust_storm_data","text":"storm_data dataset storm data. dataset must include certain columns given NOAA Storm Events datasets package created. date_range character vector length two start end dates pull data (e.g., c(\"1999-10-16\", \"1999-10-18\")). event_types Character vector types storm events kept. default value (NULL) keeps types events. See \"Details\" vignette package details possible event types. dist_limit numeric scalar distance (kilometers) county must storm's path included. default (NULL) eliminate events based distance storm's path. option used also specifying storm storm parameter. storm character string name storm pull storm events data . string must follow format \"[storm-name]-[4-digit storm year]\" (e.g., \"Floyd-1999\"). Currently, functionality works storms included extended hurricane best tracks, covers 1988 2015.","code":""},{"path":"/reference/clean_storm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean storm dataset — clean_storm_data","title":"Clean storm dataset — clean_storm_data","text":"Cleans storm dataset prepare processing. includes changing variable names lowercase, removing unneeded columns, removing narratives requested user.","code":""},{"path":"/reference/clean_storm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean storm dataset — clean_storm_data","text":"","code":"clean_storm_data(storm_data, include_narratives)"},{"path":"/reference/clean_storm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean storm dataset — clean_storm_data","text":"storm_data dataset storm data. dataset must include certain columns given NOAA Storm Events datasets package created. include_narratives logical value whether final data data frame include columns episode event narratives (TRUE) (FALSE, default)","code":""},{"path":"/reference/clean_storm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean storm dataset — clean_storm_data","text":"cleaned version dataset input function.","code":""},{"path":"/reference/create_storm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get storm data based on date range or storm name — create_storm_data","title":"Get storm data based on date range or storm name — create_storm_data","text":"function pulls storm events data based specified date range / storm name. (Note: function pulls full years' worth data. Later functions filter exact date range desired.)","code":""},{"path":"/reference/create_storm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get storm data based on date range or storm name — create_storm_data","text":"","code":"create_storm_data(date_range = NULL, storm = NULL, file_type = \"details\")"},{"path":"/reference/create_storm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get storm data based on date range or storm name — create_storm_data","text":"date_range character vector length two start end dates pull data (e.g., c(\"1999-10-16\", \"1999-10-18\")). storm character string name storm pull storm events data . string must follow format \"[storm-name]-[4-digit storm year]\" (e.g., \"Floyd-1999\"). Currently, functionality works storms included extended hurricane best tracks, covers 1988 2015. file_type character string specifying type file like pull. Choices include: \"details\" (default), \"fatalities\", \"locations\".","code":""},{"path":"/reference/create_storm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get storm data based on date range or storm name — create_storm_data","text":"","code":"if (FALSE) { floyd_data <- create_storm_data(date_range = c(\"1999-10-16\", \"1999-10-18\")) floyd_data2 <- create_storm_data(storm = \"Floyd-1999\") }"},{"path":"/reference/download_storm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download storm data file for a given year — download_storm_data","title":"Download storm data file for a given year — download_storm_data","text":"function takes year want download storm data, checks see already downloaded cached, , , downloads caches NOAA's online storm events files.","code":""},{"path":"/reference/download_storm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download storm data file for a given year — download_storm_data","text":"","code":"download_storm_data(year, file_type = \"details\")"},{"path":"/reference/download_storm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download storm data file for a given year — download_storm_data","text":"year four-digit numeric character string giving year user like download data. file_type character string specifying type file like pull. Choices include: \"details\" (default), \"fatalities\", \"locations\".","code":""},{"path":"/reference/download_storm_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download storm data file for a given year — download_storm_data","text":"function caches downloaded storm data object called lst persist throughout R session deleted end R session (long R history saved end session). saves time user uses storm data year several commands.","code":""},{"path":"/reference/find_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all event listings for date range — find_events","title":"Find all event listings for date range — find_events","text":"function find events US specified date range.","code":""},{"path":"/reference/find_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all event listings for date range — find_events","text":"","code":"find_events(   date_range = NULL,   event_types = NULL,   dist_limit = NULL,   storm = NULL,   include_narratives = FALSE,   include_ids = FALSE,   clean_damage = FALSE )"},{"path":"/reference/find_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all event listings for date range — find_events","text":"date_range character vector length two start end dates pull data (e.g., c(\"1999-10-16\", \"1999-10-18\")). event_types Character vector types storm events kept. default value (NULL) keeps types events. See \"Details\" vignette package details possible event types. dist_limit numeric scalar distance (kilometers) county must storm's path included. default (NULL) eliminate events based distance storm's path. option used also specifying storm storm parameter. storm character string name storm pull storm events data . string must follow format \"[storm-name]-[4-digit storm year]\" (e.g., \"Floyd-1999\"). Currently, functionality works storms included extended hurricane best tracks, covers 1988 2015. include_narratives logical value whether final data data frame include columns episode event narratives (TRUE) (FALSE, default) include_ids logical value whether final data frame include columns event episode IDs (TRUE) (FALSE, default). included, IDs used cases link events data \"fatalities\" \"locations\" files available NOAA Storm Events database. clean_damage TRUE / FALSE whether additional cleaning done try exclude incorrect damage listings. TRUE, property crop damages listing single event exceeds damages state combined event dataset, damages event listing set missing. Default FALSE (.e., additional check performed). cases, seems single listing forecast zone gives state total damages, option may help identifying excluding listings (example, one listing North Carolina Hurricane Floyd seems state total damages, rather county-specific damage estimate).","code":""},{"path":"/reference/find_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all event listings for date range — find_events","text":"","code":"if (FALSE) { # Events by date range find_events(date_range = c(\"1999-09-10\", \"1999-09-30\"))  # Events within a certain distance and time range of a tropical storm find_events(storm = \"Floyd-1999\", dist_limit = 200)  # Limit output to events that are floods or flash floods find_events(storm = \"Floyd-1999\", dist_limit = 200, event_types = c(\"Flood\", \"Flash Flood\")) }"},{"path":"/reference/find_file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a database file name — find_file_name","title":"Find a database file name — find_file_name","text":"function find name detailed file Storm Events Database specific year specific type file. file name can used (functions) download data given year.","code":""},{"path":"/reference/find_file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a database file name — find_file_name","text":"","code":"find_file_name(year = NULL, file_type = \"details\")"},{"path":"/reference/find_file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a database file name — find_file_name","text":"year four-digit numeric character string giving year user like download data. file_type character string specifying type file like pull. Choices include: \"details\" (default), \"fatalities\", \"locations\".","code":""},{"path":"/reference/find_file_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find a database file name — find_file_name","text":"function creates list file names available    https://www1.ncdc.noaa.gov/pub/data/swdi/stormevents/csvfiles/    uses regular expressions search list name    file year type file requested. files    named consistently, part name includes date file    last updated, changes frequently. method used    robust changes \"last updated\" date within file names.","code":""},{"path":"/reference/find_file_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a database file name — find_file_name","text":"","code":"if (FALSE) { find_file_name(year = 1999) find_file_name(year = 2003, file_type = \"fatalities\") }"},{"path":"/reference/get_county_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get map data for counties — get_county_map","title":"Get map data for counties — get_county_map","text":"Get map data counties","code":""},{"path":"/reference/get_county_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get map data for counties — get_county_map","text":"","code":"get_county_map(states = \"east\")"},{"path":"/reference/get_county_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get map data for counties — get_county_map","text":"states character string specifying either state name names one \"\" (map states continental US) \"east\" (plot states Eastern half US. default \"east\".","code":""},{"path":"/reference/get_county_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get map data for counties — get_county_map","text":"dataframe map data pulled using map_data function  ggplot2, filtered states eastern half United States    user specifies east_only.","code":""},{"path":"/reference/map_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Map storm events for a date range — map_events","title":"Map storm events for a date range — map_events","text":"function maps storm events listed starting date within specified date range.","code":""},{"path":"/reference/map_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map storm events for a date range — map_events","text":"","code":"map_events(   event_data,   states = \"east\",   plot_type = \"any events\",   storm = NULL,   add_tracks = FALSE )"},{"path":"/reference/map_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map storm events for a date range — map_events","text":"event_data dataframe event data, returned find_events function. states character string specifying either state name names one \"\" (map states continental US) \"east\" (plot states Eastern half US. default \"east\". plot_type Specifies type plot wanted. can \"events\", \"number events\", \"direct deaths\", \"indirect deaths\", \"direct injuries\", \"indirect injuries\", \"property damage\", \"crop damage\". storm character string name storm pull storm events data . string must follow format \"[storm-name]-[4-digit storm year]\" (e.g., \"Floyd-1999\"). Currently, functionality works storms included extended hurricane best tracks, covers 1988 2015. add_tracks logical value specifying whether add tracks hurricane map (default = FALSE).","code":""},{"path":"/reference/map_events.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Map storm events for a date range — map_events","text":"Indirect deaths injuries seem reported rarely,    likely trying map either outcomes result note    indirect deaths / injuries reported selected events.","code":""},{"path":"/reference/map_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map storm events for a date range — map_events","text":"","code":"if (FALSE) { # Map for events pulled by a date range event_data <- find_events(date_range = c(\"1999-09-10\", \"1999-09-30\")) map_events(event_data) map_events(event_data, plot_type = \"number of events\")  # Map for a specific type of event event_data <- find_events(date_range = c(\"1999-09-10\", \"1999-09-30\"),                           event_types = c(\"Flood\",\"Flash Flood\")) map_events(event_data, states = \"north carolina\", plot_type = \"number of events\") map_events(event_data, states = \"all\")  # Map for events identified based on a hurricane storm track event_data <- find_events(storm = \"Floyd-1999\", dist_limit = 300) map_events(event_data, plot_type = \"number of events\",            storm = \"Floyd-1999\", add_tracks = TRUE) map_events(event_data, plot_type = \"crop damage\",            storm = \"Floyd-1999\", add_tracks = TRUE,            states = c(\"north carolina\", \"virginia\", \"maryland\")) map_events(event_data, plot_type = \"property damage\",            storm = \"Floyd-1999\", add_tracks = TRUE) map_events(event_data, plot_type = \"direct deaths\")  event_data <- find_events(date_range = c(\"1999-01-01\", \"1999-12-31\")) map_events(event_data, plot_type = \"direct deaths\") map_events(event_data, plot_type = \"indirect deaths\") map_events(event_data, plot_type = \"direct injuries\") map_events(event_data, plot_type = \"indirect injuries\") map_events(event_data, plot_type = \"crop damage\") }"},{"path":"/reference/match_forecast_county.html","id":null,"dir":"Reference","previous_headings":"","what":"Match events by forecast zone to county — match_forecast_county","title":"Match events by forecast zone to county — match_forecast_county","text":"events reported forecast zone, use regular expressions match many possible counties.","code":""},{"path":"/reference/match_forecast_county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match events by forecast zone to county — match_forecast_county","text":"","code":"match_forecast_county(storm_data_z)"},{"path":"/reference/match_forecast_county.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match events by forecast zone to county — match_forecast_county","text":"storm_data_z dataframe storm events reported forecast zone (.e., cz_type == \"Z\") rather county. dataframe include columns: state: State name, lowercase cz_name: Location name, lowercase cz_fips: Forecast zone FIPS","code":""},{"path":"/reference/match_forecast_county.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match events by forecast zone to county — match_forecast_county","text":"dataframe events input function, county FIPS    added events matched county fips column. Events    matched kept dataframe, fips code set NA.","code":""},{"path":"/reference/match_forecast_county.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match events by forecast zone to county — match_forecast_county","text":"function tries match cz_name event    state county name county.fips dataframe comes    maps package. following steps taken try    match cz_name state county name county.fips: Tries match cz_name county name county.fips        removing periods apostrophes cz_name. Next, county names \"county\" , try match word         \"county\" county name county.fips. check two words         \"county\", one two words \"counties\". Next, pull last word cz_name try match county         name county.fips. check last two words cz_name, check         last three words cz_name. Next, pull words right slash check county name. Finally, try removing anything parentheses cz_name matching.","code":""},{"path":"/reference/match_forecast_county.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Match events by forecast zone to county — match_forecast_county","text":"function provide matches events outside    continental U.S. may want hand-check event listings names like \"Lake\", \"Mountain\",    \"Park\" unintentionally linked county like \"Lake County\".    examples seem rare example data used develop function (NOAA Storm Events    2015), can sometimes happen. , can use str_detect function    stringr package.","code":""},{"path":"/reference/match_forecast_county.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match events by forecast zone to county — match_forecast_county","text":"","code":"counties_to_parse <- dplyr::data_frame(            event_id = c(1:19),            cz_name = c(\"Suffolk\",                        \"Eastern Greenbrier\",                        \"Ventura County Mountains\",                        \"Central And Southeast Montgomery\",                        \"Western Cape May\",                        \"San Diego County Coastal Areas\",                        \"Blount/Smoky Mountains\",                        \"St. Mary's\",                        \"Central & Eastern Lake County\",                        \"Mountains Southwest Shasta County To Northern Lake County\",                        \"Kings (Brooklyn)\",                        \"Lower Bucks\",                        \"Central St. Louis\",                        \"Curry County Coast\",                        \"Lincoln County Except The Sheep Range\",                        \"Shasta Lake/North Shasta County\",                        \"Coastal Palm Beach County\",                        \"Larimer & Boulder Counties Between 6000 & 9000 Feet\",                        \"Yellowstone National Park\"),           state = c(\"Virginia\",                     \"West Virginia\",                     \"California\",                     \"Maryland\",                     \"New Jersey\",                     \"California\",                     \"Tennessee\",                     \"Maryland\",                     \"Oregon\",                     \"California\",                     \"New York\",                     \"Pennsylvania\",                     \"Minnesota\",                     \"Oregon\",                     \"Nevada\",                     \"California\",                     \"Florida\",                     \"Colorado\",                     \"Wyoming\")) #> Warning: `data_frame()` was deprecated in tibble 1.1.0. #> ℹ Please use `tibble()` instead. match_forecast_county(counties_to_parse) #> # A tibble: 19 × 4 #>    event_id cz_name                                                  state  fips #>       <int> <chr>                                                    <chr> <int> #>  1        1 Suffolk                                                  Virg… 51800 #>  2        2 Eastern Greenbrier                                       West… 54025 #>  3        3 Ventura County Mountains                                 Cali…  6111 #>  4        4 Central And Southeast Montgomery                         Mary… 24031 #>  5        5 Western Cape May                                         New … 34009 #>  6        6 San Diego County Coastal Areas                           Cali…  6073 #>  7        7 Blount/Smoky Mountains                                   Tenn… 47009 #>  8        8 St. Mary's                                               Mary… 24037 #>  9        9 Central & Eastern Lake County                            Oreg… 41037 #> 10       10 Mountains Southwest Shasta County To Northern Lake Coun… Cali…  6089 #> 11       11 Kings (Brooklyn)                                         New … 36047 #> 12       12 Lower Bucks                                              Penn… 42017 #> 13       13 Central St. Louis                                        Minn… 27137 #> 14       14 Curry County Coast                                       Oreg… 41015 #> 15       15 Lincoln County Except The Sheep Range                    Neva… 32017 #> 16       16 Shasta Lake/North Shasta County                          Cali…  6089 #> 17       17 Coastal Palm Beach County                                Flor… 12099 #> 18       18 Larimer & Boulder Counties Between 6000 & 9000 Feet      Colo…  8013 #> 19       19 Yellowstone National Park                                Wyom…    NA"},{"path":"/reference/parse_damage.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse damage values — parse_damage","title":"Parse damage values — parse_damage","text":"Take damage values include letters order magnitude (e.g., \"2K\" $2,000) return numeric value damage.","code":""},{"path":"/reference/parse_damage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse damage values — parse_damage","text":"","code":"parse_damage(damage_vector)"},{"path":"/reference/parse_damage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse damage values — parse_damage","text":"damage_vector character vector damage values (e.g., damage_crops damage_property columns NOAA Storm Events data). vector give numbers except specific abbreviations specifying order magnitude (see Details).","code":""},{"path":"/reference/parse_damage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse damage values — parse_damage","text":"input vector, parsed numeric, abbreviations orders magnitude    appropriately interpreted (e.g., \"2K\" input vector becomes numeric 2000    output vector).","code":""},{"path":"/reference/parse_damage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse damage values — parse_damage","text":"function parses following abbreviations order magnitude: \"K\":  1,000 (thousand) \"M\":  1,000,000 (million) \"B\":  1,000,000,000 (billion) \"T\":  1,000,000,000,000 (trillion)","code":""},{"path":"/reference/parse_damage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse damage values — parse_damage","text":"","code":"damage_crops <- c(\"150\", \"2K\", \"3.5B\", NA) parse_damage(damage_crops) #> [1] 1.5e+02 2.0e+03 3.5e+09 0.0e+00"},{"path":"/reference/process_input_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Process inputs to main functions — process_input_args","title":"Process inputs to main functions — process_input_args","text":"Processes user's inputs arguments main package functions, looks errors input, determines elements like year years storm data needed based user inputs.","code":""},{"path":"/reference/process_input_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process inputs to main functions — process_input_args","text":"","code":"process_input_args(date_range = NULL, storm = NULL)"},{"path":"/reference/process_input_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process inputs to main functions — process_input_args","text":"date_range character vector length two start end dates pull data (e.g., c(\"1999-10-16\", \"1999-10-18\")). storm character string name storm pull storm events data . string must follow format \"[storm-name]-[4-digit storm year]\" (e.g., \"Floyd-1999\"). Currently, functionality works storms included extended hurricane best tracks, covers 1988 2015.","code":""},{"path":"/reference/process_input_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process inputs to main functions — process_input_args","text":"list date ranges storm identification based    user inputs arguments main package function.","code":""},{"path":"/news/index.html","id":"noaastormevents-021","dir":"Changelog","previous_headings":"","what":"noaastormevents 0.2.1","title":"noaastormevents 0.2.1","text":"Change use curl package instead RCurl package curl connection interface download data NOAA Storm Events website Added pkgdown site Expanded vignettes","code":""},{"path":"/news/index.html","id":"noaastormevents-020","dir":"Changelog","previous_headings":"","what":"noaastormevents 0.2.0","title":"noaastormevents 0.2.0","text":"CRAN release: 2021-01-21 Update reflect changes data organization NOAA Storm Events online database Removed dependency package archived CRAN (htmltab) Added NEWS.md file track changes package.","code":""}]
